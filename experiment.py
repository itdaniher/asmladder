import re

# read object dump with inline line numbers
fileobj = open("main.objdump").read()
fileobj = fileobj.split('\n')[6:-1]

fileobj = '\n'.join(fileobj).split('\n\n')
ISR = fileobj[0].split('\n')
MAIN = fileobj[1].split('\n')

fileobj = ISR 

# read source file
filec = open("main.c").read()
filec = filec.split('\n')

# filter function definitions and includes
matchFunctions = re.compile(".*\([^;]*\).*{$")
matchInclude = re.compile("#.*")

def safeMatch(match = None):
	""" sugar function for regex matches """
	if match:
		return match.group()
	else:
		return None

def removeItems(regex, lst):
	""" takes a regular expression and a list and replaces all instances of the regex with an empty string """
	results = []
	for item in lst:
		results.append(safeMatch(re.search(regex, item)))
	return [item if item not in results else '' for item in lst]

# remove includes and function definitions from the C code
filec = removeItems(matchInclude, filec)
#filec = removeItems(matchFunctions, filec)


# iterate through the dumped assembly and process it. 
# when a reference is made to a line in the C code, print all the lines between the last and most recent reference.
# parse lines from the dumped assembly and discard irrelevant information.

last = 0
for item in fileobj:
	if len(item) > 0:
		if item[0] != '/': # if not a /path:number reference, then assume it to be assembly
			item = item.split() # split the line
			try:
				item = item[0:item.index(';')] # if the line has an autogenerated comment, discard it
			except:
				pass
			if item[0].find(':') in [2,1]: # if this line has a line number
				item = item[3::] # discard it, and throw out the bytecode while you're at it
			print "asm", item
		else:
			lineNumber = int(item.split(':')[-1]) # determine the line number mentioned
			print "\n", "c", filter(bool, filec[last:lineNumber]) # print all the non-empty lines between last and current line numbers
			last = lineNumber

